<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planning on 野生程序员</title>
    <link>https://gdhucoder.github.io/tags/planning/</link>
    <description>Recent content in Planning on 野生程序员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans</language>
    <lastBuildDate>Thu, 04 Jan 2018 21:25:07 +0800</lastBuildDate>
    
	<atom:link href="https://gdhucoder.github.io/tags/planning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于试验的启发式树搜索</title>
      <link>https://gdhucoder.github.io/post/planning/kellerthesis/2018-01-05/</link>
      <pubDate>Thu, 04 Jan 2018 21:25:07 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/planning/kellerthesis/2018-01-05/</guid>
      <description>[TOC]
概念： 给定一个MDP，一个agent可以访问：
 环境先验模型（a-priori model of environment） 在agent与环境交互之前就呈现给他了。 &amp;gt;which is revealed to the agent before its interaction with the environment starts.
 生成模型（a generative model） 输入一个状态和动作，输出奖励和根据转移函数的到的随机下一个状态。
   声明模型（a declarative model） 声明模型提供了MDP的描述，对于所有的状态、后继状态和动作提供了概率转移和奖励函数。  我们在此处区分学习agents （未提供先验模型）和规划agents（可以访问生成模型或者声明模型）
多臂赌博机问题（MAB）  Figuratively, the agent faces a slot machine (a bandit) with multiple arms, and it has to decide which arm to pull based only on the payouts it received so far. Each arm provides a random reward according to a probability distribution that is specific to the arm and constant over time, but the agent has no initial information on the distribution.</description>
    </item>
    
    <item>
      <title>什么是蒙特卡罗</title>
      <link>https://gdhucoder.github.io/post/planning/montecarlo/monte_carlo/</link>
      <pubDate>Sun, 26 Nov 2017 21:25:07 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/planning/montecarlo/monte_carlo/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;乍一听“蒙特卡罗”这个词，完全不知所云，我感到很奇怪，一个搜索算法Monte Carlo Tree Search为什么叫蒙特卡罗。
于是，就有了下面的文字。&lt;/p&gt;

&lt;p&gt;本篇文章主要介绍MonteCarlo方法的由来，及简单的一个应用-求π的值。
下篇将会介绍：什么是Monte Carlo Tree Search算法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>贝叶斯引论（一）</title>
      <link>https://gdhucoder.github.io/post/planning/pln_1/pln_1/</link>
      <pubDate>Fri, 20 Oct 2017 21:25:07 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/planning/pln_1/pln_1/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;本篇开始，逐一介绍一些概率编程相关内容。首先介绍贝叶斯网的相关基础知识和应用。&lt;/p&gt;

&lt;p&gt;本篇导读：&lt;/p&gt;

&lt;p&gt;本篇主要介绍了贝叶斯定理，贝叶斯网以及相关应用：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>