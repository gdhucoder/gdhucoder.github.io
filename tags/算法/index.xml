<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on CoderPunk</title>
    <link>https://gdhucoder.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on CoderPunk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans</language>
    <lastBuildDate>Tue, 11 Jun 2019 15:50:26 +0800</lastBuildDate>
    
	<atom:link href="https://gdhucoder.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java笔记</title>
      <link>https://gdhucoder.github.io/post/note/2019-06-11-javanote/</link>
      <pubDate>Tue, 11 Jun 2019 15:50:26 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/note/2019-06-11-javanote/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;Java笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>堆的应用：如何快速获取到Top 10最热门的搜索关键词？</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/29_heapapplication/</link>
      <pubDate>Mon, 20 May 2019 16:50:40 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/29_heapapplication/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;堆的应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二叉树(2):有了如此高效的散列表，为什么还需要二叉树？</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/24_binarytree_part2/</link>
      <pubDate>Wed, 01 May 2019 16:50:40 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/24_binarytree_part2/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;二叉查找树，其最大的特点就是，支持动态数据集合的快速插入，删除，查找操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/23_binarytree/</link>
      <pubDate>Wed, 01 May 2019 15:57:17 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/23_binarytree/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;介绍二叉树基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二叉树(1)</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/23_binarytree_part1/</link>
      <pubDate>Wed, 01 May 2019 15:57:17 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/23_binarytree_part1/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;介绍二叉树基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>哈希表(1)</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/18_hashmap_part1/</link>
      <pubDate>Sat, 27 Apr 2019 22:00:00 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/18_hashmap_part1/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;介绍哈希表（散列表）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跳表</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/17_skip_list/</link>
      <pubDate>Sat, 27 Apr 2019 15:48:24 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/17_skip_list/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;介绍跳表&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工业级的排序算法</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/14_sortinjava/</link>
      <pubDate>Sun, 21 Apr 2019 16:15:56 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/14_sortinjava/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;你所熟悉的语言中，排序算法是如何实现的？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>13 | 线性排序：如何根据年龄给100万用户数据排序？</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/13_radix_counting_bucket_sort/</link>
      <pubDate>Sat, 20 Apr 2019 18:23:20 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/13_radix_counting_bucket_sort/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;本篇介绍线性时间排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/gdhu/prvpic/raw/master/2019-03-20-004.jpg&#34; alt=&#34;2019-03-20-004&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>12 | 排序（下）：如何用快排思想在O(n)内查找第K大元素？</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/12_mergeandquicksort/</link>
      <pubDate>Wed, 20 Mar 2019 23:38:56 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/12_mergeandquicksort/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;12 | 排序（下）：如何用快排思想在O(n)内查找第K大元素？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/gdhu/prvpic/raw/master/2019-03-06-006.png&#34; alt=&#34;2019-03-06-006&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>11 | 排序（上）：为什么插入排序比冒泡排序更受欢迎？</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/11/</link>
      <pubDate>Sat, 02 Mar 2019 19:31:55 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/11/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/gdhu/prvpic/raw/master/2019-03-04-003.png&#34; alt=&#34;2019-03-04-003&#34;&gt;&lt;/p&gt;
&lt;p&gt;本节主要介绍排序算法。&lt;/p&gt;
&lt;p&gt;首先思考一个问题：为什么插入排序比冒泡排序更受欢迎？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10 | 递归：如何用三行代码找到“最终推荐人”？</title>
      <link>https://gdhucoder.github.io/post/alg4/geekbang/10/</link>
      <pubDate>Sat, 02 Mar 2019 09:39:55 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/alg4/geekbang/10/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/gdhu/prvpic/raw/master/2019-03-02-003.png&#34; alt=&#34;2019-03-02-003&#34;&gt;&lt;/p&gt;
&lt;p&gt;推荐注册返佣金这个功能一般来说不陌生吧？用户A推荐用户B来注册，用户B又推荐了用户C来注册。我们可以说C的“最终推荐人”为用户A，B的“最终推荐人”也为用户A，而用户A没有“最终推荐人”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Heuristic Search之Greedy Best First Search</title>
      <link>https://gdhucoder.github.io/post/java_skill/20171025-heuristic_search_gbfs/</link>
      <pubDate>Wed, 25 Oct 2017 21:25:07 +0800</pubDate>
      
      <guid>https://gdhucoder.github.io/post/java_skill/20171025-heuristic_search_gbfs/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;本篇文章介绍Greedy Best Fisrt Search算法。实现GBFS算法时使用了上篇文章介绍的优先队列。
下篇文章将尝试介绍著名的A star算法。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>